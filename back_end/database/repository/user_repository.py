# back_end/database/repository/user_repository.py

from sqlalchemy.orm import Session
from sqlalchemy import insert
from sqlalchemy.exc import NoResultFound
from back_end.database.models.user_config import User  # User vient de user_config.py
from back_end.database.models.shared_config import Gender, DietType, FitnessLevel, Goal, user_goals

class UserRepository:
    def __init__(self, db: Session):
        self.db = db

    def get_or_create_label(self, model, label: str):
        """
        Retrieve or create a reference label (e.g. Gender, DietType, etc.).

        Args:
            model: SQLAlchemy model class (e.g. Gender)
            label: Label to look for

        Returns:
            The ID of the existing or newly created row.
        """
        instance = self.db.query(model).filter_by(label=label).first()
        if instance:
            return instance.id
        new_instance = model(label=label)
        self.db.add(new_instance)
        self.db.flush()  # Get the autogenerated ID
        return new_instance.id

    def get_or_create_goals(self, goal_labels: list[str]) -> list[int]:
        """
        Retrieve or create all goal labels.

        Args:
            goal_labels: List of goal names

        Returns:
            List of goal IDs
        """
        goal_ids = []
        for label in goal_labels:
            goal = self.db.query(Goal).filter_by(label=label).first()
            if goal:
                goal_ids.append(goal.goal_id)
            else:
                new_goal = Goal(label=label)
                self.db.add(new_goal)
                self.db.flush()
                goal_ids.append(new_goal.goal_id)
        return goal_ids

    def insert_user(self, user_id: str, age: int, gender: str, height: float, weight: float,
                    target_weight: float, diet_type: str, fitness_level: str, goals: list[str]) -> str:
        """
        Insert or update a user profile with normalized references and associated goals.

        Args:
            user_id: Unique user ID
            age: Age of the user
            gender: Gender label
            height: User's height
            weight: User's weight
            target_weight: User's target weight
            diet_type: Diet preference label
            fitness_level: Fitness level label
            goals: List of goal labels

        Returns:
            User ID of the inserted or updated user
        """
        gender_id = self.get_or_create_label(Gender, gender)
        diet_type_id = self.get_or_create_label(DietType, diet_type)
        fitness_level_id = self.get_or_create_label(FitnessLevel, fitness_level)
        goal_ids = self.get_or_create_goals(goals)

        user = self.db.query(User).filter_by(user_id=user_id).first()
        if user:
            user.age = age
            user.gender_id = gender_id
            user.height = height
            user.weight = weight
            user.target_weight = target_weight
            user.diet_type_id = diet_type_id
            user.fitness_level_id = fitness_level_id
        else:
            user = User(
                user_id=user_id,
                age=age,
                gender_id=gender_id,
                height=height,
                weight=weight,
                target_weight=target_weight,
                diet_type_id=diet_type_id,
                fitness_level_id=fitness_level_id
            )
            self.db.add(user)

        self.db.flush()

        for goal_id in goal_ids:
            exists = self.db.query(user_goals).filter_by(user_id=user_id, goal_id=goal_id).first()
            if not exists:
                stmt = insert(user_goals).values(user_id=user_id, goal_id=goal_id)
                self.db.execute(stmt)

        self.db.commit()
        return user_id

    def get_all_users(self):
        """
        Retrieve all users with their basic profile information and related labels.

        Returns:
            list: List of users as dictionaries.
        """
        users = self.db.query(User).all()
        return [
            {
                "user_id": user.user_id,
                "age": user.age,
                "height": user.height,
                "weight": user.weight,
                "target_weight": user.target_weight,
                "gender": user.gender.label if user.gender else None,
                "diet_type": user.diet_type.label if user.diet_type else None,
                "fitness_level": user.fitness_level.label if user.fitness_level else None,
                "goals": [goal.label for goal in user.goals]
            }
            for user in users
        ]
